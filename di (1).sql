DROP TABLE TIPO_PAGO;
DROP TABLE MEDIO_PAGO;
DROP TABLE PEDIDO;
DROP TABLE CATEGORIA;
DROP TABLE COMPRA;
DROP TABLE DETALLE;
DROP TABLE CLIENTE;
DROP TABLE USUARIO;
DROP TABLE ADMINISTRADOR;
DROP TABLE LIBRO;
drop table cuestionario;

CREATE TABLE USUARIO(
    RUT INT NOT NULL,
    NOMBRE VARCHAR2(50),
    CONTRASENA VARCHAR2(50),
    CORREO VARCHAR2(50),
    TIPO_USUARIO VARCHAR2(50)
);


CREATE TABLE CLIENTE(
    RUT INT NOT NULL,
    TIPO_USUARIO VARCHAR2(50) DEFAULT 'CLIENTE'
);

CREATE TABLE ADMINISTRADOR(
    RUT INT NOT NULL,
    TIPO_USUARIO VARCHAR2(50) DEFAULT 'ADMINISTRADOR'
);

CREATE TABLE CATEGORIA(
    COD_CATEGORIA INT NOT NULL,
    NOMBRE_CATEGORIA VARCHAR2(50)
);

CREATE TABLE LIBRO(
    COD_LIBRO INT NOT NULL,
    NOMBRE VARCHAR2(50),
    AUTOR VARCHAR2(50),
    STOCK INT,
    PRECIO INT,
    ENLACE VARCHAR2(100),
    SINOPSIS VARCHAR2(200),
    COD_CATEGORIA INT NOT NULL
);

CREATE TABLE MEDIO_PAGO(
    COD_MEDIO INT NOT NULL,
    COD_COMPRA INT NOT NULL

);

CREATE TABLE PEDIDO(
    RUT INT NOT NULL,
    COD_LIBRO INT NOT NULL,
    CANTIDAD INT,
    PRECIO INT
);

CREATE TABLE COMPRA(
    COD_COMPRA INT NOT NULL,
    RUT INT NOT NULL,
    DIRECCION VARCHAR2(50),
    TOTAL INT,
    FECHA DATE
);

CREATE TABLE DETALLE(
    COD_LIBRO INT NOT NULL,
    COD_COMPRA INT NOT NULL,
    CANTIDAD INT,
    PRECIO_UNITARIO INT,
    TOTAL INT
);

CREATE TABLE TIPO_PAGO(
    COD_MEDIO INT NOT NULL,
    NOMBRE_MEDIO VARCHAR2(50)
);

create table cuestionario(
    cod_compra int not null,
    rut int not null,
    pregunta1 varchar2(50),
    pregunta2 varchar2(50),
    pregunta3 varchar2(50)
);

/
ALTER TABLE LIBRO ADD CONSTRAINT PK_LIBRO PRIMARY KEY (COD_LIBRO);
ALTER TABLE MEDIO_PAGO ADD CONSTRAINT PK_MEDIO PRIMARY KEY (COD_MEDIO, COD_COMPRA);
ALTER TABLE PEDIDO ADD CONSTRAINT PK_PEDIDO PRIMARY KEY(RUT,COD_LIBRO);
ALTER TABLE COMPRA ADD CONSTRAINT PK_COMPRA PRIMARY KEY(COD_COMPRA);
ALTER TABLE CATEGORIA ADD CONSTRAINT PK_CATEGORIA PRIMARY KEY(COD_CATEGORIA);
ALTER TABLE USUARIO ADD CONSTRAINT PK_USUARIO PRIMARY KEY(RUT);
ALTER TABLE ADMINISTRADOR ADD CONSTRAINT PK_ADMIN PRIMARY KEY(RUT);
ALTER TABLE CLIENTE ADD CONSTRAINT PK_CLIENTE PRIMARY KEY(RUT);
ALTER TABLE DETALLE ADD CONSTRAINT PK_DETALLE PRIMARY KEY(COD_LIBRO, COD_COMPRA);
ALTER TABLE TIPO_PAGO ADD CONSTRAINT PK_TIPO_PAGO PRIMARY KEY(COD_MEDIO);
alter table cuestionario add constraint pk_cuestionario primary key(cod_compra, rut);
/
ALTER TABLE PEDIDO ADD CONSTRAINT FK_PEDIDO FOREIGN KEY (RUT) REFERENCES CLIENTE(RUT);
ALTER TABLE PEDIDO ADD CONSTRAINT FK1_PEDIDO FOREIGN KEY (COD_LIBRO) REFERENCES LIBRO(COD_LIBRO);
ALTER TABLE COMPRA ADD CONSTRAINT FK_COMPRA FOREIGN KEY (RUT) REFERENCES CLIENTE(RUT);
ALTER TABLE LIBRO ADD CONSTRAINT FK_LIBRO FOREIGN KEY (COD_CATEGORIA) REFERENCES CATEGORIA(COD_CATEGORIA);
ALTER TABLE ADMINISTRADOR ADD CONSTRAINT FK_ADMIN FOREIGN KEY(RUT) REFERENCES USUARIO(RUT);
ALTER TABLE CLIENTE ADD CONSTRAINT FK_CLIENTE FOREIGN KEY(RUT) REFERENCES USUARIO(RUT);
ALTER TABLE DETALLE ADD CONSTRAINT FK_DETALLE1 FOREIGN KEY(COD_LIBRO) REFERENCES LIBRO(COD_LIBRO);
ALTER TABLE DETALLE ADD CONSTRAINT FK_DETALE2 FOREIGN KEY(COD_COMPRA) REFERENCES COMPRA(COD_COMPRA);
ALTER TABLE MEDIO_PAGO ADD CONSTRAINT FK_PAGO FOREIGN KEY (COD_COMPRA) REFERENCES COMPRA(COD_COMPRA);
ALTER TABLE MEDIO_PAGO ADD CONSTRAINT FK_PAGO2 FOREIGN KEY (COD_MEDIO) REFERENCES TIPO_PAGO(COD_MEDIO);
alter table cuestionario add constraint fk_cuestionario1 foreign key(cod_compra) references compra(cod_compra);
alter table cuestionario add constraint fk_cuestionario2 foreign key(rut) references cliente(rut);


INSERT INTO CATEGORIA VALUES (1,'aventura');
INSERT INTO CATEGORIA VALUES (2,'ciencia ficcion');


INSERT INTO LIBRO VALUES (1,'yo robot','isaac asimov',2,1000,'NUEVO','libro muy lindo',2);

-------------------_FUNCIONES_------------------------------
CREATE OR REPLACE FUNCTION VERIFICAR_LIBRO(
    CODIGO IN NUMBER
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM LIBRO WHERE
    COD_LIBRO = CODIGO;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/

CREATE OR REPLACE FUNCTION VERIFICAR_USUARIO(
    CODIGO IN NUMBER
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM USUARIO WHERE
    RUT = CODIGO;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/

CREATE OR REPLACE FUNCTION VERIFICAR_CATEGORIA(
    CODIGO IN NUMBER
)RETURN BOOLEAN
IS
    EXISTE NUMBER;
BEGIN
    SELECT COUNT(*) INTO EXISTE FROM CATEGORIA WHERE
    COD_CATEGORIA = CODIGO;
    IF EXISTE > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_STOCK(
    CODIGOL IN NUMBER,
    CANTIDAD IN NUMBER
)RETURN BOOLEAN
IS
    STOCK_DISP NUMBER;
BEGIN
    SELECT STOCK INTO STOCK_DISP FROM LIBRO
    WHERE CODIGOL = COD_LIBRO;
    IF CANTIDAD <= STOCK_DISP THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;

/

CREATE OR REPLACE FUNCTION OBTENER_CONTRA(
    RUTU IN NUMBER
)RETURN VARCHAR2
IS
    CONTRA_USUARIO VARCHAR2(50);
BEGIN
    IF VERIFICAR_USUARIO(RUTU) = TRUE THEN
        SELECT CONTRASENA INTO CONTRA_USUARIO FROM USUARIO
        WHERE RUTU = RUT;
        RETURN CONTRA_USUARIO;
    ELSE
        RETURN 'false';
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'false';
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_PEDIDO(
    RUTU IN NUMBER,
    CODIGOL IN NUMBER
)RETURN BOOLEAN
IS
    CONT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONT FROM PEDIDO
    WHERE RUTU = RUT AND CODIGOL = COD_LIBRO;
    IF CONT > 0 THEN 
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;

/
CREATE OR REPLACE FUNCTION OBTENER_PRECIO(
    CODIGOL IN NUMBER
)RETURN NUMBER
IS
    PRECIO_UNITARIO NUMBER;
BEGIN
    IF VERIFICAR_LIBRO(CODIGOL) = TRUE THEN
        SELECT PRECIO INTO PRECIO_UNITARIO FROM LIBRO
        WHERE COD_LIBRO = CODIGOL;
        RETURN PRECIO_UNITARIO;
    ELSE
        RETURN -1;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN -1;
END;
/

CREATE OR REPLACE FUNCTION VERIFICAR_LIBROS_PEDIDO(
    RUTU IN NUMBER
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONTADOR FROM PEDIDO
    WHERE RUT = RUTU;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN  NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/

CREATE OR REPLACE FUNCTION OBTENER_CODIGO_COMPRA
RETURN NUMBER
IS 
    COD_MAX_COMPRA NUMBER;
BEGIN
    SELECT COUNT(*) INTO COD_MAX_COMPRA FROM COMPRA;
    RETURN COD_MAX_COMPRA + 1;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN -1;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_TIPO_PAGO(
    CODIGOT IN NUMBER
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT (*) INTO CONTADOR FROM TIPO_PAGO
    WHERE CODIGOT = COD_MEDIO;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_COMPRA(
    CODIGOC IN NUMBER
)RETURN BOOLEAN
IS
    CONTADOR NUMBER;
BEGIN
    SELECT COUNT (*) INTO CONTADOR FROM COMPRA
    WHERE CODIGOC = COD_COMPRA;
    IF CONTADOR > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;
/
CREATE OR REPLACE FUNCTION VERIFICAR_LIBRO_COMPRADO(
    CODIGOL IN DETALLE.COD_LIBRO%TYPE,
    CODIGOC IN DETALLE.COD_COMPRA%TYPE
)RETURN BOOLEAN
IS
    CONT NUMBER;
BEGIN
    SELECT COUNT(*) INTO CONT FROM DETALLE
    WHERE CODIGOC = COD_COMPRA AND CODIGOL = COD_LIBRO;
    IF CONT > 0 THEN
        RETURN TRUE;
    ELSE
        RETURN FALSE;
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN FALSE;
END;


/
-------------------------__PROCEDIMIENTOS__----------------------------------------
CREATE OR REPLACE PROCEDURE INGRESAR_CATEGORIA(
    CODIGOC IN CATEGORIA.COD_CATEGORIA%TYPE,
    NOMBREC IN CATEGORIA.NOMBRE_CATEGORIA%TYPE,
    MENSAJE OUT VARCHAR2,
    RESULTADO OUT VARCHAR2
)
IS
    CATEGORIA_EXISTE EXCEPTION;
BEGIN
    IF VERIFICAR_CATEGORIA(CODIGOC) = FALSE THEN
        LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
        INSERT INTO CATEGORIA VALUES(CODIGOC, NOMBREC);
        RESULTADO := 'true';
        MENSAJE := 'categoria ingresada con exito';
        COMMIT;
    ELSE
        RAISE CATEGORIA_EXISTE;
    END IF;
    EXCEPTION
        WHEN CATEGORIA_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'la categoria ya existe';
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE INGRESAR_USUARIO(
    RUTU IN USUARIO.RUT%TYPE,
    NOMBREU IN USUARIO.NOMBRE%TYPE,
    CONTRAU IN USUARIO.CONTRASENA%TYPE,
    CORREOU IN USUARIO.CORREO%TYPE,
    TIPOU IN USUARIO.TIPO_USUARIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    USUARIO_EXISTE EXCEPTION;
    CORREO_INVALIDO EXCEPTION;
    TIPO_INVALIDO EXCEPTION;
BEGIN
    IF VERIFICAR_USUARIO(RUTU) = FALSE THEN
        IF TIPOU = 'CLIENTE' OR TIPOU = 'ADMINISTRADOR' THEN
            IF CORREOU LIKE '%@hotmail.com' OR CORREOU LIKE '%@gmail.com' THEN
                LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
                INSERT INTO USUARIO VALUES (RUTU, NOMBREU, CONTRAU, CORREOU, TIPOU);
                RESULTADO := 'true';
                MENSAJE := 'usuario ingresado con exito';
                COMMIT;
            ELSE
                RAISE CORREO_INVALIDO;
            END IF;
        ELSE
            RAISE TIPO_INVALIDO;
        END IF;
    ELSE
        RAISE USUARIO_EXISTE;
    END IF;
    EXCEPTION
        WHEN CORREO_INVALIDO THEN
            RESULTADO := 'false';
            MENSAJE := 'ingrese un correo valido';
            ROLLBACK;
        WHEN TIPO_INVALIDO THEN
            RESULTADO := 'false';
            MENSAJE := 'tipo de usuario invalido';
            ROLLBACK;
        WHEN USUARIO_EXISTE THEN
            RESULTADO := 'true';
            MENSAJE := 'el usuario ya existe';
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE ELIMINAR_USUARIO(
    RUTU IN USUARIO.RUT%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2   
)
IS
    USUARIO_EXISTE EXCEPTION;
    CORREO_INVALIDO EXCEPTION;
    TIPO_INVALIDO EXCEPTION;
BEGIN
    IF VERIFICAR_USUARIO(RUTU) = TRUE THEN
        LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
        DELETE FROM USUARIO WHERE RUTU = RUT;
        RESULTADO := 'true';
        MENSAJE := 'usuario eliminado con exito';
        COMMIT;
    ELSE
        RAISE USUARIO_EXISTE;
    END IF;
    EXCEPTION
        WHEN USUARIO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el usuario no existe';
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE ELIMINAR_LIBRO(
    CODIGOL IN LIBRO.COD_LIBRO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2   
)
IS
    USUARIO_EXISTE EXCEPTION;

BEGIN
    IF VERIFICAR_LIBRO(CODIGOL) = TRUE THEN
        LOCK TABLE LIBRO IN ROW EXCLUSIVE MODE;
        DELETE FROM LIBRO WHERE CODIGOL = COD_LIBRO;
        RESULTADO := 'true';
        MENSAJE := 'libro eliminado con exito';
        COMMIT;
    ELSE
        RAISE USUARIO_EXISTE;
    END IF;
    EXCEPTION
        WHEN USUARIO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el libro no existe';
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE ELIMINAR_CATEGORIA(
    CODIGOC IN CATEGORIA.COD_CATEGORIA%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2   
)
IS
    USUARIO_EXISTE EXCEPTION;

BEGIN
    IF VERIFICAR_CATEGORIA(CODIGOC) = TRUE THEN
        LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
        DELETE FROM CATEGORIA WHERE CODIGOC = COD_CATEGORIA;
        RESULTADO := 'true';
        MENSAJE := 'categoria eliminada con exito';
        COMMIT;
    ELSE
        RAISE USUARIO_EXISTE;
    END IF;
    EXCEPTION
        WHEN USUARIO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'la categoria no existe';
            ROLLBACK;
END;
/
CREATE OR REPLACE PROCEDURE INGRESAR_LIBRO(
    CODIGOL IN LIBRO.COD_LIBRO%TYPE,
    NOMBREL IN LIBRO.NOMBRE%TYPE,
    AUTORL IN LIBRO.AUTOR%TYPE,
    STOCKL IN LIBRO.STOCK%TYPE,
    PRECIOL IN LIBRO.PRECIO%TYPE,
    ENLACEL IN LIBRO.ENLACE%TYPE,
    SINOPSISL IN LIBRO.SINOPSIS%TYPE,
    CODCAT IN LIBRO.COD_CATEGORIA%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    LIBRO_EXISTE EXCEPTION;
    STOCK_NEGATIVO EXCEPTION;
BEGIN
    IF VERIFICAR_LIBRO(CODIGOL) = FALSE THEN
        IF STOCKL > 0 THEN
                LOCK TABLE LIBRO IN ROW EXCLUSIVE MODE;
                INSERT INTO LIBRO VALUES(CODIGOL, NOMBREL, AUTORL, STOCKL, PRECIOL, ENLACEL, SINOPSISL, CODCAT);
                RESULTADO := 'true';
                MENSAJE := 'libro ingresado on exito';
                COMMIT;
        ELSE 
            RAISE STOCK_NEGATIVO;
        END IF;
    ELSE
        RAISE LIBRO_EXISTE;
    END IF;
    EXCEPTION
        WHEN STOCK_NEGATIVO THEN
            RESULTADO := 'false';
            MENSAJE := 'el stock debe ser mayor a 0';
            ROLLBACK;
        WHEN LIBRO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el libro ya existe';
            ROLLBACK;
END;



/
CREATE OR REPLACE PROCEDURE INICIAR_SESION(
    RUTU IN USUARIO.RUT%TYPE,
    CONTRAU IN USUARIO.CONTRASENA%TYPE,
    MENSAJE OUT VARCHAR2,
    RESULTADO OUT VARCHAR2
)   
IS
    CONTRA VARCHAR2(50);
BEGIN
    IF VERIFICAR_USUARIO(RUTU) = TRUE THEN
        CONTRA := OBTENER_CONTRA(RUTU);
        IF CONTRA <> 'false' THEN
            IF CONTRA = CONTRAU THEN
                RESULTADO := 'true';
                MENSAJE := 'bienvenido';
            ELSE
                RESULTADO := 'false';
                MENSAJE := 'contraseña incorrecta';
            END IF;
        ELSE
            RESULTADO := 'false';
            MENSAJE := 'el usuario o contraseña es incorrecto';
        END IF;
    ELSE
        RESULTADO := 'false';
        MENSAJE := 'el usuario o contraseña es incorrecto';
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RESULTADO := 'false';
END;
/
CREATE OR REPLACE PROCEDURE AGREGAR_PEDIDO(--arreglar el descontar stock del libro
    CODIGOL IN PEDIDO.COD_LIBRO%TYPE,
    RUTU IN PEDIDO.RUT%TYPE,
    CANTIDADP IN PEDIDO.CANTIDAD%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    STOCK_SUPERADO EXCEPTION;
    STOCK_ACTUALIZADO_SUPERADO EXCEPTION;
    CLIENTE_NO_EXISTE EXCEPTION;
    LIBRO_NO_EXISTE EXCEPTION;
    CANTIDAD_CERO EXCEPTION;
BEGIN
    LOCK TABLE PEDIDO IN ROW EXCLUSIVE MODE;
    IF CANTIDADP > 0 THEN
        IF VERIFICAR_LIBRO(CODIGOL) = TRUE THEN
            IF VERIFICAR_USUARIO(RUTU) = TRUE THEN
                IF VERIFICAR_PEDIDO(RUTU, CODIGOL) = FALSE THEN
                    IF VERIFICAR_STOCK(CODIGOL, CANTIDADP) = TRUE THEN
                        INSERT INTO PEDIDO VALUES (RUTU, CODIGOL, CANTIDADP,OBTENER_PRECIO(CODIGOL));
                        COMMIT;
                        RESULTADO := 'true';
                        MENSAJE := 'el libro se ha agregado al pedido';
                    ELSE
                        RAISE STOCK_SUPERADO;
                    END IF;
                ELSE
                    IF VERIFICAR_STOCK(CODIGOL, CANTIDADP) = TRUE THEN
                        UPDATE PEDIDO
                        SET CANTIDAD = CANTIDADP
                        WHERE COD_LIBRO = CODIGOL AND RUT = RUTU;
                        COMMIT;
                        RESULTADO := 'true';
                        MENSAJE := 'el pedido ha sido actualizado';
                    ELSE
                        RAISE STOCK_ACTUALIZADO_SUPERADO;
                    END IF;
                END IF;
            ELSE
                RAISE CLIENTE_NO_EXISTE;
            END IF;
        ELSE
            RAISE LIBRO_NO_EXISTE;
        END IF;
    ELSE
        RAISE CANTIDAD_CERO;
    END IF;
    EXCEPTION
        WHEN STOCK_SUPERADO THEN
            RESULTADO := 'false';
            MENSAJE := 'la cantidad de libros supera el stock';
            ROLLBACK;
        WHEN STOCK_ACTUALIZADO_SUPERADO THEN
            RESULTADO := 'false';
            MENSAJE := 'la cantidad de libros a actualizar supera el stock';
            ROLLBACK;
        WHEN CLIENTE_NO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el cliente no existe';
            ROLLBACK;
        WHEN LIBRO_NO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el libro no existe';
            ROLLBACK;
        WHEN CANTIDAD_CERO THEN
            RESULTADO := 'false';
            MENSAJE := 'debe ingresar una cantidad mayor a 0';
            ROLLBACK;
        WHEN OTHERS THEN
            RESULTADO := 'false';
            MENSAJE := 'error no controlado';
            ROLLBACK;                        
END;
/
CREATE OR REPLACE PROCEDURE GENERAR_COMPRA(
    RUT_CLIENTE IN COMPRA.RUT%TYPE,
    DIR_ENTREGA IN COMPRA.DIRECCION%TYPE,
    MEDIOP IN TIPO_PAGO.COD_MEDIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    CLIENTE_NO_EXISTE EXCEPTION;
    CLIENTE_SIN_LIBROS EXCEPTION;
    COD_COMPRA_NO_GENERADO EXCEPTION;
    LIBRO_EXCEDE_STOCK EXCEPTION;
    ERROR_COPIA_DETALLE EXCEPTION;
    TIPO_PAGO_NO_EXISTE EXCEPTION;
    CODIGO_COMPRA NUMBER;--esta deberia entrar en el medio de pago
    CANTIDAD_PEDIDO NUMBER;
    CURSOR LISTA_LIBROS_PEDIDO IS SELECT COD_LIBRO, CANTIDAD, PRECIO FROM PEDIDO
        WHERE RUT = RUT_CLIENTE;
    COD_LIBRO_AUXILIAR NUMBER;
    CANTIDAD_AUXILIAR NUMBER;
    PRECIO_AUXILIAR NUMBER;
    CONTADOR_LIBROS_PROCESADOS NUMBER;
    VERIF_STOCK BOOLEAN;
BEGIN
    LOCK TABLE COMPRA IN ROW EXCLUSIVE MODE;
    LOCK TABLE DETALLE IN ROW EXCLUSIVE MODE;
    LOCK TABLE MEDIO_PAGO IN ROW EXCLUSIVE MODE;
    IF VERIFICAR_USUARIO(RUT_CLIENTE) = TRUE THEN        
        IF VERIFICAR_LIBROS_PEDIDO(RUT_CLIENTE) = TRUE THEN            
            IF VERIFICAR_TIPO_PAGO(MEDIOP) = TRUE THEN
                SELECT COUNT(*) INTO CANTIDAD_PEDIDO FROM PEDIDO WHERE RUT = RUT_CLIENTE;
                CONTADOR_LIBROS_PROCESADOS := 0;
                CODIGO_COMPRA := OBTENER_CODIGO_COMPRA();
               IF CODIGO_COMPRA <> -1 THEN
                    INSERT INTO COMPRA VALUES (CODIGO_COMPRA, RUT_CLIENTE, DIR_ENTREGA, 0, ADD_MONTHS(SYSDATE,1));
                    INSERT INTO MEDIO_PAGO VALUES(MEDIOP, CODIGO_COMPRA);
                    OPEN LISTA_LIBROS_PEDIDO;
                    LOOP
                        FETCH LISTA_LIBROS_PEDIDO INTO COD_LIBRO_AUXILIAR, CANTIDAD_AUXILIAR, PRECIO_AUXILIAR;
                        EXIT WHEN LISTA_LIBROS_PEDIDO%NOTFOUND;
                        VERIF_STOCK := VERIFICAR_STOCK(COD_LIBRO_AUXILIAR, CANTIDAD_AUXILIAR);                        
                        IF VERIF_STOCK = TRUE THEN
                            DBMS_OUTPUT.PUT_LINE('codigo '||COD_LIBRO_AUXILIAR||'- cantidad: '||CANTIDAD_AUXILIAR||'- precio: '||PRECIO_AUXILIAR);
                            INSERT INTO DETALLE VALUES (COD_LIBRO_AUXILIAR, CODIGO_COMPRA, CANTIDAD_AUXILIAR, PRECIO_AUXILIAR, 0);
                            CONTADOR_LIBROS_PROCESADOS := CONTADOR_LIBROS_PROCESADOS + 1;
                        ELSE
                            RAISE LIBRO_EXCEDE_STOCK;
                        END IF;                        
                    END LOOP;
                    CLOSE LISTA_LIBROS_PEDIDO;
                    IF CONTADOR_LIBROS_PROCESADOS = CANTIDAD_PEDIDO THEN
                        LOCK TABLE PEDIDO IN ROW EXCLUSIVE MODE;
                        DELETE FROM PEDIDO WHERE RUT = RUT_CLIENTE;
                        RESULTADO := 'true';
                        MENSAJE := 'compra realizada con exito';
                        COMMIT;
                    ELSE
                        RAISE ERROR_COPIA_DETALLE;
                    END IF;                
                ELSE
                    RAISE COD_COMPRA_NO_GENERADO;
                END IF;            
            ELSE
                RAISE TIPO_PAGO_NO_EXISTE;
            END IF;
        ELSE
            RAISE CLIENTE_SIN_LIBROS;
        END IF;
    ELSE
        RAISE CLIENTE_NO_EXISTE;
    END IF;
    EXCEPTION
        WHEN LIBRO_EXCEDE_STOCK THEN
            RESULTADO := 'false';
            MENSAJE := 'unos o mas productos exceden el stock';
            ROLLBACK;
        WHEN ERROR_COPIA_DETALLE THEN
            RESULTADO := 'false';
            MENSAJE := 'unos o mas productos fallaron al copiarse a detalle';
            ROLLBACK;
        WHEN COD_COMPRA_NO_GENERADO THEN
            RESULTADO := 'false';
            MENSAJE := 'error al generar codigo de compra';
            ROLLBACK;
        WHEN CLIENTE_SIN_LIBROS THEN
            RESULTADO := 'false';
            MENSAJE := 'el cliente no posee productos en el pedido';
            ROLLBACK;
        WHEN CLIENTE_NO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el cliente ingresado no existe';
            ROLLBACK;                    
        WHEN TIPO_PAGO_NO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el tipo de pago no existe';
END;
/
CREATE OR REPLACE PROCEDURE INGRESAR_TIPO_PAGO(
    TIPOP IN TIPO_PAGO.COD_MEDIO%TYPE,
    NOMBREP IN TIPO_PAGO.NOMBRE_MEDIO%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)
IS
    TIPO_PAGO_EXISTE EXCEPTION;
BEGIN
    IF VERIFICAR_TIPO_PAGO(TIPOP) = FALSE THEN
        LOCK TABLE TIPO_PAGO IN ROW EXCLUSIVE MODE;
        INSERT INTO TIPO_PAGO VALUES (TIPOP, NOMBREP);
        RESULTADO := 'true';
        MENSAJE := 'tipo de pago ingresado con exito';
        COMMIT;
    ELSE
        RAISE TIPO_PAGO_EXISTE;
    END IF;
    EXCEPTION
        WHEN TIPO_PAGO_EXISTE THEN
            RESULTADO := 'false';
            MENSAJE := 'el tipo de pago ya existe';
            ROLLBACK;        
END;
/

CREATE OR REPLACE PROCEDURE ANULAR_COMPRA(
    CODIGOC IN COMPRA.COD_COMPRA%TYPE,
    RESULTADO OUT VARCHAR2,
    MENSAJE OUT VARCHAR2
)IS
    CURSOR LISTA_LIBROS_COMPRADOS IS SELECT COD_LIBRO, CANTIDAD FROM DETALLE
        WHERE COD_COMPRA = CODIGOC;
    COD_LIBRO_AUX NUMBER;
    CANT_AUX NUMBER;
    CANT_LIBROS NUMBER;
    CONT_AUX NUMBER;
    LIBRO_NO_COMPRADO EXCEPTION;
    COMPRA_NO_ANULADA EXCEPTION;
BEGIN
    LOCK TABLE COMPRA IN ROW EXCLUSIVE MODE;
    SELECT COUNT(*) INTO CANT_LIBROS FROM DETALLE
    WHERE CODIGOC = COD_COMPRA;
    CONT_AUX := 0;
    OPEN LISTA_LIBROS_COMPRADOS;
    LOOP
        FETCH LISTA_LIBROS_COMPRADOS INTO COD_LIBRO_AUX, CANT_AUX;
        EXIT WHEN LISTA_LIBROS_COMPRADOS%NOTFOUND;
        IF VERIFICAR_LIBRO_COMPRADO(COD_LIBRO_AUX, CODIGOC) = TRUE THEN
            DELETE FROM DETALLE WHERE CODIGOC = COD_COMPRA
            AND COD_LIBRO = COD_LIBRO_AUX;
            DELETE FROM COMPRA WHERE CODIGOC = COD_COMPRA;
            CONT_AUX := CONT_AUX + 1;
        ELSE
            RAISE LIBRO_NO_COMPRADO;
        END IF;
    END LOOP;
    CLOSE LISTA_LIBROS_COMPRADOS; --arreglar el mensaje
    IF CONT_AUX = CANT_LIBROS THEN
        RESULTADO := 'true';
        MENSAJE := 'la compra ha sido eliminada';
        COMMIT;
    ELSE
        RAISE COMPRA_NO_ANULADA;
    END IF;
    EXCEPTION   
        WHEN LIBRO_NO_COMPRADO THEN
            RESULTADO := 'false';
            MENSAJE := 'el libro no hasido comprado';
            ROLLBACK;
        WHEN COMPRA_NO_ANULADA THEN
            RESULTADO := 'false';
            MENSAJE := 'no se puede anular la compra';
            ROLLBACK;          

END;
/
create or replace procedure agregar_cuestionario(
    codigoc in cuestionario.cod_compra%type,
    rutc in cuestionario.rut%type,
    preg1 in cuestionario.pregunta1%type,
    preg2 in cuestionario.pregunta2%type,
    preg3 in cuestionario.pregunta3%type,
    resultado out varchar2,
    mensaje out varchar2
)
is
    compra_no_existe exception;
    cliente_no_existe exception;
begin
    lock table cuestionario in row exclusive mode;
    if verificar_usuario(rutc) = true then
        if verificar_compra(codigoc) = true then
            insert into cuestionario values(codigoc, rutc, preg1, preg2, preg3);
            resultado := 'true';
            mensaje := 'cuestionario ingresado';
            commit;
        else
            raise compra_no_existe;
        end if;
    else
        raise cliente_no_existe;
    end if;
    exception
        when compra_no_existe then
            resultado := 'false';
            mensaje := 'no existe la compra';
            rollback;
        when cliente_no_existe then
            resultado := 'false';
            mensaje := 'el cliente no existe';
            rollback;            
end;

/
--------------------------__TRIGGERS___-------------------------------------------

CREATE OR REPLACE TRIGGER INSERTAR_USUARIO
AFTER INSERT ON USUARIO
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.TIPO_USUARIO = 'CLIENTE' THEN
        INSERT INTO CLIENTE VALUES (:NEW.RUT, 'CLIENTE');
    ELSIF :NEW.TIPO_USUARIO = 'ADMINISTRADOR' THEN
        INSERT INTO ADMINISTRADOR VALUES(:NEW.RUT,'ADMINISTRADOR');
    END IF;
END;
/
CREATE OR REPLACE TRIGGER BORRAR_USUARIO
BEFORE DELETE ON USUARIO
FOR EACH ROW
DECLARE
BEGIN
    IF :OLD.TIPO_USUARIO = 'CLIENTE' THEN
        DELETE FROM CLIENTE WHERE RUT = :OLD.RUT;
    ELSIF :OLD.TIPO_USUARIO = 'ADMINISTRADOR' THEN
        DELETE FROM ADMINISTRADOR WHERE RUT = :OLD.RUT;
    END IF;
END;
/
create or replace trigger borrar_medio
before delete on compra
for each row
declare
begin
    delete from medio_pago where cod_compra = :old.cod_compra;
end;
/
CREATE OR REPLACE TRIGGER AUMENTAR_STOCK
AFTER DELETE ON DETALLE
FOR EACH ROW
DECLARE
BEGIN  
    UPDATE LIBRO
    SET STOCK = STOCK + :OLD.CANTIDAD
    WHERE COD_LIBRO = COD_LIBRO;
END;
/
CREATE OR REPLACE TRIGGER ACTUALIZAR_DETALLE
BEFORE INSERT ON DETALLE
FOR EACH ROW 
DECLARE
BEGIN
    :NEW.TOTAL := :NEW.CANTIDAD * :NEW.PRECIO_UNITARIO;
END;
/
CREATE OR REPLACE TRIGGER ACTUALIZAR_COMPRA
AFTER INSERT ON DETALLE
FOR EACH ROW
DECLARE
BEGIN
    UPDATE LIBRO SET STOCK = STOCK - :NEW.CANTIDAD
    WHERE COD_LIBRO = :NEW.COD_LIBRO;
    UPDATE COMPRA SET TOTAL = TOTAL + :NEW.TOTAL
    WHERE COD_COMPRA = :NEW.COD_COMPRA;
END;


-------------------------VISTAS----------------------------






----------------------------PRUEBAS---------------------


INSERT INTO USUARIO VALUES (123,'nimbre','contra','correo','CLIENTE');
INSERT INTO CLIENTE VALUES (123,'CLIENTE');
SET SERVEROUTPUT ON;
DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    INGRESAR_USUARIO(1233,'nimbre','contra','correo@gmail.com','CLIENTE',RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;


DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    INICIAR_SESION(123,'contra',RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;

DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    AGREGAR_PEDIDO(1,1233,2,RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;

DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    GENERAR_COMPRA(1233,'direccion',1,RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;

DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    ANULAR_COMPRA(1,RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;

DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    INGRESAR_TIPO_PAGO(1,'credito',RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;


DECLARE
    RESULTADO VARCHAR2(50);
    MENSAJE VARCHAR2(50);
BEGIN
    INGRESAR_TIPO_PAGO(2,'debito',RESULTADO, MENSAJE);
    DBMS_OUTPUT.PUT_LINE('resultado: '||RESULTADO);
    DBMS_OUTPUT.PUT_LINE('mensaje: '||MENSAJE);
END;



SET SERVEROUTPUT ON;

    INSERT INTO COMPRA VALUES (123,1,'calle falsa 123', SYSDATE);
SELECT * FROM COMPRA;
SELECT * FROM DETALLE;
SELECT * FROM TIPO_PAGO;
SELECT * FROM MEDIO_PAGO;
DELETE FROM COMPRA;

SET SERVEROUTPUT ON;
SELECT * FROM LIBRO;
SELECT * FROM PEDIDO;
SELECT * FROM USUARIO;
SELECT * FROM CLIENTE;
SELECT * FROM ADMINISTRADOR;
DELETE FROM USUARIO;